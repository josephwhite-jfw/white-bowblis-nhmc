# Load packages
library(tidyverse)
library(fixest)    # fast regressions, panel & DiD friendly
library(lmtest)
library(sandwich)
# Load panel
panel <- read.csv("C:\\Repositories\\white-bowblis-nhmc\\data\\clean\\pbj_panel_with_chow_dummies.csv")
# Light cleanup / guards
# month FE works fine as Date or factor; convert to month-start Date if needed
if (!inherits(panel$month, "Date")) {
suppressWarnings({
# try ISO
panel$month <- as.Date(panel$month)
# if that failed for many rows, try "YYYY-MM" format
if (sum(is.na(panel$month)) > 0.5 * nrow(panel)) {
panel$month <- as.Date(paste0(panel$month, "-01"))
}
})
}
# ensure treat_post is numeric 0/1
if (!"treat_post" %in% names(panel)) stop("Missing treat_post in panel.")
panel$treat_post <- as.integer(panel$treat_post %in% c(1, "1", TRUE, "TRUE"))
# ever_treated (needed for the event-study spec); create if missing
if (!"ever_treated" %in% names(panel)) {
panel$ever_treated <- as.integer(!is.na(panel$event_time) | panel$treat_post == 1)
}
# ===== Models with total_hppd as DV =====
# m1: simple OLS
m1 <- lm(total_hppd ~ treat_post, data = panel)
summary(m1)
# m2: add a few baseline controls
m2 <- lm(
total_hppd ~ treat_post + num_beds + pct_medicare + pct_medicaid,
data = panel
)
summary(m2)
# m3: facility FE + month FE (TWFE), clustered by CCN
m3 <- feols(
total_hppd ~ treat_post + pct_medicare + pct_medicaid |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number
)
summary(m3)
# ===== Event study (unchanged DV from your example; RN-specific) =====
# If you also want an ES for total_hppd, duplicate this block and swap the outcome.
m4 <- feols(
total_hppd ~ i(event_time, ever_treated, ref = -1) |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number
)
summary(m4)
iplot(
m4, ref.line = 0,
main = "Total HPPD — Event Study",
xlab = "Months relative to CHOW (ref = -1)"
)
library(dplyr)
panel <- panel |> mutate(month = as.Date(ifelse(grepl("^\\d{4}-\\d{2}$", month),
paste0(month, "-01"), month)))
# Does event_time==0 line up with the first treated month?
first_treat <- panel |>
filter(treat_post == 1) |>
group_by(cms_certification_number) |>
summarise(first_treat_month = min(month, na.rm = TRUE), .groups = "drop")
chk <- panel |>
left_join(first_treat, by = "cms_certification_number") |>
mutate(is_event0_by_first = (event_time == 0) & (month == first_treat_month))
# Counts per CCN
ccn_event0_counts <- chk |>
group_by(cms_certification_number) |>
summarise(n_event0 = sum(event_time == 0, na.rm = TRUE),
n_event0_by_first = sum(is_event0_by_first, na.rm = TRUE),
.groups = "drop")
summary(ccn_event0_counts$n_event0)         # how many zeroes per CCN?
summary(ccn_event0_counts$n_event0_by_first)# how many align with the first_treat?
library(fixest)
m4 <- feols(
total_hppd ~ i(event_time, ever_treated, ref = -1) |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number
)
# Joint H0: all pre-treatment coefficients (−12..−2) = 0
pre_ks <- paste0("event_time::", -12:-2, ":ever_treated")
wald(m4, pre_ks)   # look at p-value; small p => pre-trend present
library(dplyr)
library(fixest)
# Build first_treat_month
panel_sa <- panel |>
group_by(cms_certification_number) |>
mutate(first_treat_month = if (any(treat_post == 1, na.rm = TRUE))
min(month[treat_post == 1], na.rm = TRUE) else as.Date(NA)) |>
ungroup()
# Optional: keep never-treated as controls (they just have NA first_treat_month)
# Optional window trim around first treatment
trim <- function(df, lead = 24, lag = 36){
df |>
mutate(evt = as.integer((month - first_treat_month) / 30.4375)) |>
filter(is.na(evt) | (evt >= -lead & evt <= lag))
}
panel_sa <- trim(panel_sa, lead = 24, lag = 36)
# Optional weights: if you have resident-days use that; otherwise proxy
if (!"resident_days" %in% names(panel_sa)) {
panel_sa <- panel_sa |>
mutate(weight_proxy = pmax(1, as.numeric(num_beds) * as.numeric(occupancy_rate) * 30))
wexpr <- ~ weight_proxy
} else {
wexpr <- ~ resident_days
}
m_sa <- feols(
total_hppd ~ sunab(first_treat_month, month) |
cms_certification_number + month,
data = panel_sa,
weights = wexpr,
cluster = ~ cms_certification_number
)
panel$state <- as.factor(panel$state)
m3b <- feols(
total_hppd ~ treat_post + pct_medicare + pct_medicaid +
i(case_mix_decile_state) |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number + state
)
summary(m3b)
# --- Setup ---
library(tidyverse)
library(fixest)
library(broom)
PANEL_FP  <- "C:\\Repositories\\white-bowblis-nhmc\\data\\clean\\pbj_panel_with_chow_dummies.csv"
OUT_DIR   <- "C:\\Repositories\\white-bowblis-nhmc\\data\\clean"
dir.create(OUT_DIR, showWarnings = FALSE, recursive = TRUE)
panel <- read.csv(PANEL_FP)
# Light hygiene
panel <- panel |>
mutate(
month = ifelse(grepl("^\\d{4}-\\d{2}$", month), paste0(month, "-01"), month),
month = as.Date(month),
treat_post = as.integer(treat_post %in% c(1, "1", TRUE, "TRUE"))
)
# --- Models (all clustered by CCN) ---
m1 <- feols(total_hppd ~ treat_post,
data = panel, cluster = ~ cms_certification_number)
m2 <- feols(total_hppd ~ treat_post + num_beds + pct_medicare + pct_medicaid,
data = panel, cluster = ~ cms_certification_number)
m3 <- feols(total_hppd ~ treat_post + pct_medicare + pct_medicaid |
cms_certification_number + month,
data = panel, cluster = ~ cms_certification_number)
# --- Console summary (quick read) ---
etable(
list("OLS" = m1, "OLS + controls" = m2, "TWFE (CCN & month FE)" = m3),
se.below = TRUE,
fitstat = c("n","r2","ar2","within.r2"),
digits = 3
)
# --- Setup ---
library(tidyverse)
library(fixest)
library(broom)
PANEL_FP  <- "C:\\Repositories\\white-bowblis-nhmc\\data\\clean\\pbj_panel_with_chow_dummies.csv"
OUT_DIR   <- "C:\\Repositories\\white-bowblis-nhmc\\data\\clean"
dir.create(OUT_DIR, showWarnings = FALSE, recursive = TRUE)
panel <- read.csv(PANEL_FP)
# Light hygiene
panel <- panel |>
mutate(
month = ifelse(grepl("^\\d{4}-\\d{2}$", month), paste0(month, "-01"), month),
month = as.Date(month),
treat_post = as.integer(treat_post %in% c(1, "1", TRUE, "TRUE"))
)
# --- Models (all clustered by CCN) ---
m1 <- feols(total_hppd ~ treat_post,
data = panel, cluster = ~ cms_certification_number)
m2 <- feols(total_hppd ~ treat_post + num_beds + pct_medicare + pct_medicaid,
data = panel, cluster = ~ cms_certification_number)
m3 <- feols(total_hppd ~ treat_post + pct_medicare + pct_medicaid |
cms_certification_number + month,
data = panel, cluster = ~ cms_certification_number)
# --- Console summary (quick read) ---
etable(
list("OLS" = m1, "OLS + controls" = m2, "TWFE (CCN & month FE)" = m3),
se.below = TRUE,
fitstat = ~ n + r2 + ar2 + wr2,   # <-- use wr2 for within-R²
digits = 3
)
# --- Save compact GOF summary ---
gof_tbl <- tibble(
model = c("OLS","OLS + controls","TWFE"),
n     = sapply(list(m1, m2, m3), nobs),
r2    = sapply(list(m1, m2, m3), \(x) fitstat(x, "r2")),
ar2   = sapply(list(m1, m2, m3), \(x) suppressWarnings(fitstat(x, "ar2"))),
within_r2 = c(NA, NA, fitstat(m3, "wr2")),  # <-- wr2
fe_facility = c(FALSE, FALSE, TRUE),
fe_month    = c(FALSE, FALSE, TRUE)
)
write.csv(gof_tbl, file.path(OUT_DIR, "prelim_reg_gof.csv"), row.names = FALSE)
# --- Preliminary regressions on total_hppd (console-only) ---
# Packages
suppressPackageStartupMessages({
library(tidyverse)  # dplyr, readr, etc.
library(fixest)     # fast OLS + FE regressions
})
# ---- Path to your panel ----
PANEL_FP <- "C:\\Repositories\\white-bowblis-nhmc\\data\\clean\\pbj_panel_with_chow_dummies.csv"
# ---- Load ----
panel <- read.csv(PANEL_FP, stringsAsFactors = FALSE)
# ---- Light hygiene ----
# month can be "YYYY-MM" or a full ISO date; coerce to Date
panel <- panel |>
mutate(
month = ifelse(grepl("^\\d{4}-\\d{2}$", month), paste0(month, "-01"), month),
month = as.Date(month),
# binary 0/1
treat_post = as.integer(treat_post %in% c(1, "1", TRUE, "TRUE")),
# ensure numeric controls (quietly)
across(c(num_beds, pct_medicare, pct_medicaid), ~ suppressWarnings(as.numeric(.x)))
)
# ---- Quick overview ----
cat("\n[overview]\n")
cat("rows:", nrow(panel),
"| unique CCNs:", dplyr::n_distinct(panel$cms_certification_number),
"| month range:", format(min(panel$month, na.rm = TRUE), "%Y-%m"),
"→", format(max(panel$month, na.rm = TRUE), "%Y-%m"), "\n")
cat("Outcome mean (total_hppd):", round(mean(panel$total_hppd, na.rm = TRUE), 3), "\n")
# ---- Models (clustered by CCN) ----
# m1: simple OLS
m1 <- feols(
total_hppd ~ treat_post,
data = panel,
cluster = ~ cms_certification_number
)
# m2: add baseline controls
m2 <- feols(
total_hppd ~ treat_post + num_beds + pct_medicare + pct_medicaid,
data = panel,
cluster = ~ cms_certification_number
)
# m3: Two-way FE (facility & month FE) with a couple of controls
m3 <- feols(
total_hppd ~ treat_post + pct_medicare + pct_medicaid |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number
)
# ---- Console table (no files) ----
cat("\n[preliminary results]\n")
etable(
list("OLS" = m1, "OLS + controls" = m2, "TWFE (CCN & month FE)" = m3),
se.below = TRUE,
fitstat = ~ n + r2 + ar2 + wr2,  # 'wr2' = within-R² for FE models
digits = 3
)
# ---- Back-of-envelope context for treat_post ----
y_mean <- mean(panel$total_hppd, na.rm = TRUE)
tp_m1  <- unname(coef(m1)["treat_post"])
tp_m3  <- unname(coef(m3)["treat_post"])
cat("\n[context]\n")
cat(sprintf("m1 (OLS)  treat_post = %+0.3f  | %s of outcome mean (%0.2f%%)\n",
tp_m1, ifelse(is.finite(tp_m1), "share", "NA"), 100 * tp_m1 / y_mean))
cat(sprintf("m3 (TWFE) treat_post = %+0.3f  | %s of outcome mean (%0.2f%%)\n\n",
tp_m3, ifelse(is.finite(tp_m3), "share", "NA"), 100 * tp_m3 / y_mean))
# ---- Optional: quick event-study preview (console only)
# Set TRUE if you want to run; requires event_time & ever_treated columns
RUN_EVENT_STUDY <- FALSE
if (RUN_EVENT_STUDY && all(c("event_time","ever_treated") %in% names(panel))) {
cat("[event study] total_hppd around CHOW (ref = -1)\n")
m_es <- feols(
total_hppd ~ i(event_time, ever_treated, ref = -1) |
cms_certification_number + month,
data = panel,
cluster = ~ cms_certification_number
)
print(summary(m_es))
# Pre-trend test: coefficients at -12..-2 jointly zero
pre_ks <- paste0("event_time::", -12:-2, ":ever_treated")
cat("\n[pre-trend joint test: months -12..-2 == 0]\n")
print(wald(m_es, pre_ks))
}
source("C:/Repositories/white-bowblis-nhmc/src/panel_regressions.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/panel_regressions.R", echo = TRUE)
summary(models)
source("C:/Repositories/white-bowblis-nhmc/src/panel_regressions.R", echo = TRUE)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
etable(m1, m2, m3, m4, se.below=TRUE, signif.code="letters", digits=4,
dict = c("cm_state_q::"="CM Q(state) "),
drop = "(Intercept)")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
options(scipen = 999, digits = 3)
library(fixest)
library(dplyr)
library(readr)
library(modelsummary)
# === Load panel ===
panel_fp <- "C:/Repositories/white-bowblis-nhmc/data/clean/pbj_panel_with_chow_dummies.csv"
df <- read_csv(
panel_fp,
col_types = cols(
month = col_date(),
cms_certification_number = col_character()
)
)
# === Prep variables ===
df <- df %>%
mutate(
for_profit    = as.integer(for_profit),
non_profit    = as.integer(non_profit),
is_chain      = as.integer(is_chain),
ccrc_facility = as.integer(ccrc_facility),
urban         = as.integer(ifelse(urban %in% c(1, "1"), 1, 0)),
cm_state_q    = ifelse(is.na(case_mix_quartile_state), -1L, as.integer(case_mix_quartile_state))
)
# === Models ===
m1 <- feols(
rn_hppd ~ for_profit + non_profit + is_chain + num_beds + ccrc_facility +
occupancy_rate + pct_medicare + pct_medicaid +
i(cm_state_q, ref = -1) + urban | cms_certification_number + month,
data = df,
vcov = ~ cms_certification_number + month
)
m2 <- feols(
lpn_hppd ~ for_profit + non_profit + is_chain + num_beds + ccrc_facility +
occupancy_rate + pct_medicare + pct_medicaid +
i(cm_state_q, ref = -1) + urban | cms_certification_number + month,
data = df,
vcov = ~ cms_certification_number + month
)
m3 <- feols(
cna_hppd ~ for_profit + non_profit + is_chain + num_beds + ccrc_facility +
occupancy_rate + pct_medicare + pct_medicaid +
i(cm_state_q, ref = -1) + urban | cms_certification_number + month,
data = df,
vcov = ~ cms_certification_number + month
)
m4 <- feols(
total_hppd ~ for_profit + non_profit + is_chain + num_beds + ccrc_facility +
occupancy_rate + pct_medicare + pct_medicaid +
i(cm_state_q, ref = -1) + urban | cms_certification_number + month,
data = df,
vcov = ~ cms_certification_number + month
)
modelsummary(
list(
"RN HPPD"    = m1,
"LPN HPPD"   = m2,
"CNA HPPD"   = m3,
"Total HPPD" = m4
),
stars = TRUE,
gof_omit = 'IC|Log|Adj|Within|Between|Overall',
title = 'HPPD Regressions with Facility & Month FE',
output = "markdown"
)
source("~/.active-rstudio-document", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/regressions_logged.R", echo = TRUE)
y <- "rn_hppd"  # switch to lpn_hppd / cna_hppd / total_hppd to inspect others
controls_vec <- c("government","non_profit","chain","num_beds","ccrc_facility",
"occupancy_rate","pct_medicare","pct_medicaid",
"cm_q_state_2","cm_q_state_3","cm_q_state_4","urban")
window <- -24:24
df_diag <- df %>%
mutate(
lhs_bad      = is.na(.data[[y]]) | (.data[[y]] <= 0),  # log() will drop these
es_outside   = ever_treated == 1 & !(.data[["event_time"]] %in% window),
es_missing   = ever_treated == 1 & is.na(event_time),
fe_bad       = is.na(cms_certification_number) | is.na(year_month)
) %>%
mutate(rhs_na_any = do.call(pmax.int, c(across(all_of(controls_vec), ~ as.integer(is.na(.))), 0L)) == 1L)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
summary(m_es_rn)
summary(m_es_lpn)
summary(m_es_cna)
summary(m_es_tot)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
View(df)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
View(df)
View(df)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
summary(m_es_rn); summary(m_es_lpn); summary(m_es_cna); summary(m_es_tot)
library(dplyr)
library(ggplot2)
treated_only <- df %>% filter(ever_treated == 1L)
ggplot(treated_only, aes(x = event_time, y = total_hppd)) +
stat_summary(fun = mean, geom = "line") +
geom_vline(xintercept = -1, linetype = 2) +
labs(x = "Months relative to CHOW", y = "Mean Total HPPD (treated only)")
gc()
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R", echo = TRUE)
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R")
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R")
gc()
source("C:/Repositories/white-bowblis-nhmc/src/event_study.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
source("C:/Repositories/white-bowblis-nhmc/src/event_study_log.R")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
gc()
# C:/Repositories/white-bowblis-nhmc/src/event_study_min_two_controls.R
library(fixest)
library(readr)
library(dplyr)
panel_fp <- "C:/Repositories/white-bowblis-nhmc/data/clean/analytical_panel.csv"
# Keep just what we need
keep_cols <- c(
"cms_certification_number","year_month",
"event_time","treatment",
"government","non_profit", "chain", "ccrc_facility",
"sff_facility", "cm_q_state_2", "cm_q_state_3",
"cm_q_state_4", "urban",
"rn_hppd","lpn_hppd","cna_hppd","total_hppd"
)
df <- read_csv(panel_fp, show_col_types = FALSE, col_select = all_of(keep_cols)) %>%
mutate(
year_month = as.character(year_month),
cms_certification_number = as.factor(cms_certification_number)
)
# 1) Ever-treated flag (treated at any point) --------------------
df <- df %>%
group_by(cms_certification_number) %>%
mutate(ever_treated = as.integer(any(treatment == 1, na.rm = TRUE) | any(!is.na(event_time)))) %>%
ungroup()
# 2) Sentinel-coded event time (avoid RHS NAs; show only -24..+24) ----
df <- df %>%
mutate(
event_time_capped = dplyr::case_when(
ever_treated == 1L & !is.na(event_time) ~ pmin(pmax(event_time, -24L), 24L),
TRUE                                    ~ 9999L   # sentinel for never-treated / off-window
)
)
# 3) Helper to run the ES on an outcome (LOGGED outcome) -----------
run_es <- function(lhs) {
# drop non-positive for logs
df_lhs <- df %>% filter(!is.na(.data[[lhs]]), .data[[lhs]] > 0)
cat(sprintf("[info] %s: using %d rows after LHS>0 filter\n", lhs, nrow(df_lhs)))
feols(
as.formula(paste0(
"log(", lhs, ") ~ i(event_time_capped, ever_treated, ref = -1, keep = -24:24) + ",
"government + non_profit + chain + ccrc_facility + sff_facility +",
"cm_q_state_2 + cm_q_state_3 + cm_q_state_4 + urban",
" | cms_certification_number + year_month"
)),
data = df_lhs,
vcov = ~ cms_certification_number + year_month,
lean = TRUE
)
}
# 4) Run models ---------------------------------------------------------
m_rn   <- run_es("rn_hppd")
m_lpn  <- run_es("lpn_hppd")
m_cna  <- run_es("cna_hppd")
m_tot  <- run_es("total_hppd")
cat("\n=== Event study with controls (LOGGED outcomes) ===\n")
summary(m_rn); summary(m_lpn); summary(m_cna); summary(m_tot)
# 5) Plots (limited to -24..+24) ---------------------------------------
iplot(m_rn,  ref = -1, xlim = c(-24, 24),
xlab = "Months relative to CHOW", ylab = "log RN HPPD",   main = "ES (log): RN")
iplot(m_lpn, ref = -1, xlim = c(-24, 24),
xlab = "Months relative to CHOW", ylab = "log LPN HPPD",  main = "ES (log): LPN")
iplot(m_cna, ref = -1, xlim = c(-24, 24),
xlab = "Months relative to CHOW", ylab = "log CNA HPPD",  main = "ES (log): CNA")
iplot(m_tot, ref = -1, xlim = c(-24, 24),
xlab = "Months relative to CHOW", ylab = "log Total HPPD",main = "ES (log): Total")
View(df)
View(df)
